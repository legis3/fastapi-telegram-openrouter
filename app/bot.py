import asyncio
import re
import contextlib
from time import monotonic
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, Update
from aiogram.filters import CommandStart
from aiogram.enums import ChatAction, ParseMode
from aiogram.client.default import DefaultBotProperties
from .openrouter_client import stream_chat_completion
from .settings import settings
from aiogram.client.session.aiohttp import AiohttpSession
from fastapi import APIRouter, Request

bot_router = Router()
fastapi_router = APIRouter()


MDV2_SPECIALS = r'[_*\[\]()~`>#+\-=|{}.!]'
def escape_mdv2(text: str) -> str:
    return re.sub(f'({MDV2_SPECIALS})', r'\\\1', text)

MAX_TG_LEN = 4096                 # –ª–∏–º–∏—Ç Telegram
EDIT_INTERVAL_SEC = 1.5           # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É edit_text
CHUNK_EDIT_MIN_DIFF = 80          # –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–æ—Å—å –º–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤
FALLBACK_SEND_AFTER = 3           # –ø–æ—Å–ª–µ N –ø–æ–¥—Ä—è–¥ retry_after -> –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ sendMessage
STATUS_PREFIX_MDV2 = "*–ò–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏‚Ä¶*"
MAX_TG_LEN = 4096

@bot_router.message(CommandStart())
async def start_cmd(m: Message):
    greeting = "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—á—É –ø–æ—Ç–æ–∫–æ–º —á–µ—Ä–µ–∑ OpenRouter üöÄ"
    await m.answer(escape_mdv2(greeting), parse_mode=ParseMode.MARKDOWN_V2)

def split_chunks(text: str, max_len: int = MAX_TG_LEN) -> list[str]:
    """–†–µ–∂–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º/—Å—Ç—Ä–æ–∫–∞–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å MarkdownV2."""
    res, cur = [], []
    cur_len = 0
    for part in text.split("\n"):
        add = (("\n" if cur else "") + part)
        if cur_len + len(add) > max_len:
            res.append("".join(cur))
            cur, cur_len = [part], len(part)
        else:
            cur.append(add)
            cur_len += len(add)
    if cur:
        res.append("".join(cur))
    return res

@bot_router.message(F.text)
async def handle_text_stream(m: Message):
    msgs = [{"role": "user", "content": m.text.strip()}]

    # 1) —Å—Ç–∞—Ç—É—Å
    status_msg = await m.answer(STATUS_PREFIX_MDV2, parse_mode=ParseMode.MARKDOWN_V2)
    typing_task = asyncio.create_task(_typing_loop(m))

    try:
        buffer = ""
        last_edit = monotonic()
        edit_interval = 1.5
        last_len = 0

        async for chunk in stream_chat_completion(msgs):
            buffer += chunk
            # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ‚Äú—á–µ—Ä–Ω–æ–≤–∏–∫‚Äù: —Å—Ç–∞—Ç—É—Å + —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            now = monotonic()
            if now - last_edit >= edit_interval and len(buffer) - last_len >= 80:
                draft = STATUS_PREFIX_MDV2 + "\n\n" + escape_mdv2(buffer)
                # —Å –∑–∞–ø–∞—Å–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å 4096
                if len(draft) > MAX_TG_LEN:
                    draft = draft[:MAX_TG_LEN - 20] + "\\n_‚Ä¶–æ–±—Ä–µ–∑–∞–Ω–æ_"
                with contextlib.suppress(Exception):
                    await status_msg.edit_text(draft, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
                last_edit, last_len = now, len(buffer)

        # 2) –§–∏–Ω–∞–ª: —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç
        final_plain = buffer if buffer else "(–ø—É—Å—Ç–æ)"
        final_md = escape_mdv2(final_plain)

        # –µ—Å–ª–∏ –≤–ª–∞–∑–∏—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        final_ok = STATUS_PREFIX_MDV2 + "\n\n" + final_md
        if len(final_md) <= MAX_TG_LEN:
            with contextlib.suppress(Exception):
                await status_msg.edit_text(final_md, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
        else:
            # —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ: —à–ª—ë–º –∫—É—Å–∫–∏ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            for chunk in split_chunks(final_md, MAX_TG_LEN):
                await m.answer(chunk, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
            with contextlib.suppress(Exception):
                await m.bot.delete_message(chat_id=m.chat.id, message_id=status_msg.message_id)

    except Exception as e:
        await status_msg.edit_text("*–û—à–∏–±–∫–∞:* " + escape_mdv2(str(e)), parse_mode=ParseMode.MARKDOWN_V2)
    finally:
        typing_task.cancel()
        with contextlib.suppress(asyncio.CancelledError):
            await typing_task

async def _typing_loop(m: Message):
    try:
        while True:
            await m.bot.send_chat_action(chat_id=m.chat.id, action=ChatAction.TYPING)
            await asyncio.sleep(4)
    except asyncio.CancelledError:
        return

# --- –∑–∞–ø—É—Å–∫ polling (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ) ---
async def start_polling(dp: Dispatcher):
    bot = Bot(
        token=settings.TELEGRAM_BOT_TOKEN,
        session=AiohttpSession(),
        default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2),
    )
    await dp.start_polling(bot)
    
    # --- Webhook (–ø—Ä–æ–¥) ---
@fastapi_router.post("/telegram/webhook")
async def telegram_webhook(request: Request):
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(bot_router)  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –∂–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}